#!/bin/bash

# Synopsis:
# Run all available tests on the example/exemplar solution.

# Arguments:
# $1: exercise slug
# $2: path to solution folder
# $3: path to output directory      ** unused

# Output:
# Writes the test results to a results.json file in the passed-in output directory.
# The test results are formatted according to the specifications at https://github.com/exercism/docs/blob/main/building/tooling/test-runners/interface.md

# Example:
# ./bin/verify-exercise-example two-fer path/to/solution/folder/ path/to/output/directory/

# If any required arguments is missing, print the usage and exit
if (( $# != 3 )); then
    echo "Usage: $0 exercise-slug path/to/solution/folder/ path/to/output/directory/"
    exit 1
fi

slug="$1"
solution_dir=$(realpath "${2%/}")
# shellcheck disable=SC2034
output_dir=$(realpath "${3%/}")     ## unused

echo "${slug}: testing..."

# Run the tests for the provided implementation file and redirect stdout and
# stderr to capture it
cd "${solution_dir}" || exit
echo "${solution_dir}"

cleanup() { rm -f ./user_output.md ./output.json; }
trap cleanup EXIT

# Perform tests
if ! test_output=$(sqlite3 '' --init "${slug}_test.sql" -bail  '.exit' 2>&1); then
    echo "Test failed for ${slug} - sqlite3 error:"
    echo "${test_output}"
    exit 1
fi

# Check for failed tests
# The exercise's test script creates output.json in the current directory
failed_results=$(jq '.[] | select(.status=="fail") | {name, message}' ./output.json) || exit

if [[ -n "${failed_results}" ]]; then
    echo "Test failed for ${slug} - failing tests:"
    echo "$failed_results"
    exit 1
fi

echo "${slug}: done"
