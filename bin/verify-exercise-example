#!/usr/bin/env sh

# Synopsis:
# Run the test runner on the example/exemplar solution.

# Arguments:
# $1: exercise slug
# $2: path to solution folder
# $3: path to output directory

# Output:
# Writes the test results to a results.json file in the passed-in output directory.
# The test results are formatted according to the specifications at https://github.com/exercism/docs/blob/main/building/tooling/test-runners/interface.md

# Example:
# ./bin/verify-exercise-example two-fer path/to/solution/folder/ path/to/output/directory/

# If any required arguments is missing, print the usage and exit
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
    echo "usage: ./bin/verify-exercise-example exercise-slug path/to/solution/folder/ path/to/output/directory/"
    exit 1
fi

slug="$1"
solution_dir=$(realpath "${2%/}")
output_dir=$(realpath "${3%/}")

# Create the output directory if it doesn't exist
mkdir -p "${output_dir}"

echo "${slug}: testing..."

# Run the tests for the provided implementation file and redirect stdout and
# stderr to capture it
cd "${solution_dir}" || exit
echo "${solution_dir}"
test_output=$(sqlite3 '' --init "./${slug}_test.sql" -bail  '.exit' 2>&1)
rm ./user_output.md || true

# Check if sqlite ran withour errors:
if [ $? -ne 0 ]; then
    echo "Test failed for ${slug}"
    echo "${test_output}"
    exit 1
fi

# check if all tests were succesfull
failed_results=$(cat ./output.json | jq '.[] | select(.status=="fail") | {name, message}')
rm ./output.json || true
if [ -n "${failed_results}"]; then
    echo "Test failed for ${slug}"
    echo "$failed_results"
    exit 1
fi

echo "${slug}: done"